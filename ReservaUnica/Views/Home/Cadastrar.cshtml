@model ReservaUnica.Models.CadastroPontosReservaViewModel
@{
    ViewData["Title"] = "Cadastro de Pontos de Reservas";
}

<script id="code">
    function init() {
        var $GO = go.GraphObject.make;  //define o objeto

        myDiagram =
            $GO(go.Diagram, "myDiagramDiv",
                {
                    initialContentAlignment: go.Spot.Center,
                    //isReadOnly: true,  // allow selection but not moving or copying or deleting
                    "toolManager.hoverDelay": 100,  // velocidade para mostrar tooltips (se tiver)
                    "toolManager.mouseWheelBehavior": go.ToolManager.WheelZoom,  // scrool do mouse da zoom dentro da imagem
                    // habilitar double-click para criar um ponto
                    "clickCreatingTool.archetypeNodeData": { Nome: "Ponto", Ativo: true, Cor: "#ffff00", key: "0" },
                    //habilitar o ctrl z
                    "undoManager.isEnabled": true,
                    "ModelChanged": function (e) {
                        if (e.isTransactionFinished) {
                            document.getElementById("savedModelJson").textContent = myDiagram.model.toJson();
                        }
                    }
                });
        //diagrama fica estático
        myDiagram.contentAlignment = go.Spot["Center"];

        //background image
        myDiagram.add(
            $GO(go.Part,
                {
                    layerName: "Background", position: new go.Point(0, 0),
                    selectable: false, pickable: false
                },
                $GO(go.Picture, "~/../../images/planta_1.png")
                /*$GO(go.Picture, "~/../../images/planta_2.png")*/
                /*$GO(go.Picture, "~/../../images/planta_3.jpg")*/
            ));

        // HTML context menu:
        var cxElement = document.getElementById("contextMenu");

        // an HTMLInfo object is needed to invoke the code to set up the HTML cxElement
        var myContextMenu = $GO(go.HTMLInfo, {
            show: showContextMenu,
            hide: hideContextMenu
        });

        // Criando o template e as características dos pontos
        myDiagram.nodeTemplate =
            $GO(go.Node, "Auto",
                { contextMenu: myContextMenu, locationSpot: go.Spot.Center },
                new go.Binding("location", "X_Y", go.Point.parse).makeTwoWay(go.Point.stringify),
                $GO(go.Shape, "circle",
                    {
                        stroke: null, strokeWidth: 0,
                        fill: "yellow", // the default fill, if there is no data-binding
                        portId: "", cursor: "pointer",  // the Shape is the port, not the whole Node
                        width: 24, height: 24
                    },
                    new go.Binding("fill", "Cor")),
                $GO(go.TextBlock,
                    {
                        font: "bold 18px sans-serif",
                        stroke: '#111',
                        maxSize: new go.Size(220, NaN),
                        //wrap: go.TextBlock.WrapFit,
                        margin: 8,  // make some extra space for the shape around the text
                        isMultiline: false,  // don't allow newlines in text
                        editable: false  // allow in-place editing by user
                    },
                    new go.Binding("text", "text").makeTwoWay())
            );

        $(function () {
            $("#infoDraggable").draggable({ handle: "#infoDraggableHandle" });

            // Mostra as informações do ponto ao selecioná-lo
            var inspector = new Inspector('myInfo', myDiagram,
                {
                    showAllProperties: true,
                    properties: {
                        "key": { type: 'text', readOnly: false, show: Inspector.showIfPresent, maxlength: 5 },
                        "Nome": { type: 'text', maxlength: 50 },
                        "Cor": { show: Inspector.showIfPresent, type: 'color' },
                        "Detalhes": { show: Inspector.showIfNode, type: 'text', maxlength: 100 },
                        "Ativo": { show: Inspector.showIfNode, type: 'checkbox' },
                        "X_Y": { readOnly: true, type: 'text' }
                    }
                });
        });

        //personalizar o menu context
        myDiagram.contextMenu = myContextMenu;

        // Isso evita que o menu context seja o default do browser
        cxElement.addEventListener("contextmenu", function (e) {
            e.preventDefault();
            return false;
        }, false);

        function hideCX() {
            if (myDiagram.currentTool instanceof go.ContextMenuTool) {
                myDiagram.currentTool.doCancel();
            }
        }

        function showContextMenu(obj, diagram, tool) {
            // Mostra apenas as opções relevantes para o estado do momento
            var cmd = diagram.commandHandler;
            var hasMenuItem = false;
            function maybeShowItem(elt, pred) {
                if (pred) {
                    elt.style.display = "block";
                    hasMenuItem = true;
                } else {
                    elt.style.display = "none";
                }
            }
            maybeShowItem(document.getElementById("cut"), cmd.canCutSelection());
            maybeShowItem(document.getElementById("copy"), cmd.canCopySelection());
            maybeShowItem(document.getElementById("paste"), cmd.canPasteSelection(diagram.toolManager.contextMenuTool.mouseDownPoint));
            maybeShowItem(document.getElementById("delete"), cmd.canDeleteSelection());

            // Mostrar context menu
            if (hasMenuItem) {
                cxElement.classList.add("show-menu");
                // we don't bother overriding positionContextMenu, we just do it here:
                var mousePt = diagram.lastInput.viewPoint;
                cxElement.style.left = mousePt.x + 5 + "px";
                cxElement.style.top = mousePt.y + "px";
            }

            // Optional: Use a `window` click listener with event capture to
            //           remove the context menu if the user clicks elsewhere on the page
            window.addEventListener("click", hideCX, true);
        }

        function hideContextMenu() {
            cxElement.classList.remove("show-menu");
            // Optional: Use a `window` click listener with event capture to
            //           remove the context menu if the user clicks elsewhere on the page
            window.removeEventListener("click", hideCX, true);
        }
    }

    // menu command handler, parametrizado pelo nome do command.
    function cxcommand(event, val) {
        if (val === undefined) val = event.currentTarget.id;
        var diagram = myDiagram;
        switch (val) {
            case "cut": diagram.commandHandler.cutSelection(); break;
            case "copy": diagram.commandHandler.copySelection(); break;
            case "paste": diagram.commandHandler.pasteSelection(diagram.toolManager.contextMenuTool.mouseDownPoint); break;
            case "delete": diagram.commandHandler.deleteSelection(); break;
        }
        diagram.currentTool.stopTool();
    }

    function salvarCadastro() {
        const pontos = JSON.parse(document.getElementById("savedModelJson").textContent);        
        var data = { LstNodeDataArray: pontos.nodeDataArray };
        $.ajax({
            method: "POST",
            url: "/Home/SalvarCadastroPontos",
            data: data,
            success: function () {
                alert("Cadastro salvo com sucesso!");
                window.location.href = "/Home/Editar/1";
            }
        });
    };

    window.addEventListener('DOMContentLoaded', init);
</script>
<div class="container">
    <div class="col-md-12 text-center">
        <h2>Cadastro de Pontos de Reservas</h2>
    </div>
    <div class="row">
        <div class="col-2">
            <div id="infoDraggable" class="draggable" style="display: inline-block; padding: 0px; left: 15px; top: 0px;">
                <div id="infoDraggableHandle" class="handle">Informações</div>
                <div>
                    <div id="myInfo"></div>
                </div>
            </div>
        </div>
        <div class="col-12">
            <div id="myDiagramDiv" style="border: solid 1px black; width:100%; height:700px"></div>
            <ul id="contextMenu" class="menu">
                <li id="cut" class="menu-item" onclick="cxcommand(event)">Recortar</li>
                <li id="copy" class="menu-item" onclick="cxcommand(event)">Copiar</li>
                <li id="paste" class="menu-item" onclick="cxcommand(event)">Colar</li>
                <li id="delete" class="menu-item" onclick="cxcommand(event)">Deletar</li>
            </ul>
        </div>
    </div>
    <div class="row text-center mt-2">
        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 text-center">
            <a class="btn btn-outline-dark mr-2" asp-area="" asp-controller="Home" asp-action="Index" title="Voltar para tela inicial">Tela Inicial</a>
            <button type="button" class="btn btn-success ml-2" id="btnSalvarCadastro" onclick="salvarCadastro();" title="Salvar o cadastro">Salvar</button>
        </div>
    </div>
    <h3>Dicas e atalhos:</h3>
    <ul class="list-group pr-0">
        <li class="list-group-item list-group-item-info">Adicionar um ponto: basta fazer um click duplo na imagem.</li>
        <li class="list-group-item list-group-item-danger">Excluir um ponto: basta clicar nele e apertar DELETE no teclado ou no celular segurando o ponto e selecionando a opção deletar.</li>
        <li class="list-group-item list-group-item-info">Editar texto: selecione o ponto e edite no painel.</li>
        <li class="list-group-item list-group-item-success">Atalhos do teclado como CTRL C, CTRL V, CTRL X e CTRL Z, também funcionam!</li>
        <li class="list-group-item list-group-item-info">Scroll do mouse dentro da área da imagem dá zoom.</li>
    </ul>
    <div class="alert alert-success mt-3" role="alert">
        <h4 class="alert-heading">Resultado linha a linha</h4>
        <p>Abaixo é possível visualizar o resultado em json a cada transação:</p>
        <p class="mb-0 pb-0"><pre class="text-white" id="savedModelJson" /></p>
    </div>
</div>
